import os, json, uuid, datetime as dt, boto3
import logging

logger = logging.getLogger()
logger.setLevel(logging.INFO)

# --- CHANGE 1: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£) ---
# ‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° image format ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô webp, gif
# S3 ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ Content-Type ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ validate ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏à‡∏£‡∏¥‡∏á
ALLOWED_EXT = {
    "jpg": "image/jpeg", 
    "jpeg": "image/jpeg", 
    "png": "image/png",
    "webp": "image/webp", # ‡πÄ‡∏û‡∏¥‡πà‡∏° webp ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    "gif": "image/gif"   # ‡πÄ‡∏û‡∏¥‡πà‡∏° gif ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    "heic": "image/heic"
    "heif": "image/heif"  # <-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ
}

# ‡πÉ‡∏ä‡πâ "*" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏™‡πà Domain ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
CORS_ORIGIN = os.environ.get("CORS_ORIGIN", "*") 

def _resp(status, body):
    return {
        "statusCode": status,
        "headers": {
            "content-type": "application/json",
            "Access-Control-Allow-Origin": CORS_ORIGIN,
            "Access-Control-Allow-Headers": "Content-Type",
            "Access-Control-Allow-Methods": "GET,OPTIONS",
        },
        "body": json.dumps(body, ensure_ascii=False),
    }

def handler(event, context):
    try:
        bucket = os.environ.get("RAW_BUCKET")
        if not bucket:
            logger.error("‚ùå RAW_BUCKET env not set")
            return _resp(500, {"error": "RAW_BUCKET env not set"})

        qs = event.get("queryStringParameters") or {}
        user_id = (qs.get("userId") or "anonymous").strip()
        ext = (qs.get("ext") or "jpg").lower()

        ctype = ALLOWED_EXT.get(ext)
        if not ctype:
            logger.warning(f"‚ùå Unsupported ext requested: {ext}")
            # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ error ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ñ‡πâ‡∏≤ frontend ‡∏™‡πà‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏°‡∏≤
            return _resp(400, {"error": f"Unsupported file type: {ext}. Allowed types are: {list(ALLOWED_EXT.keys())}"})

        # --- CHANGE 2: ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÄ‡∏õ‡πá‡∏ô 32 MB ---
        # 1 MB = 1024 * 1024 bytes
        # 32 MB = 32 * 1024 * 1024 = 33,554,432 bytes
        # S3 ‡∏à‡∏∞‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        max_size = int(os.environ.get("MAX_SIZE", "33554432")) # Default to 32 MB

        now = dt.datetime.utcnow()
        key = f"uploads/user={user_id}/dt={now:%Y/%m/%d}/{uuid.uuid4()}.{ext}"

        logger.info(f"üöÄ Presign requested | user={user_id}, fileKey={key}, maxSize={max_size} bytes")

        s3 = boto3.client("s3")
        
        # S3's 'Conditions' ‡∏Ñ‡∏∑‡∏≠‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£ validate ‡∏ù‡∏±‡πà‡∏á server
        presigned = s3.generate_presigned_post(
            Bucket=bucket,
            Key=key,
            Fields={"Content-Type": ctype},
            Conditions=[
                # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô max_size ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                ["content-length-range", 0, max_size],
                # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Content-Type ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏£‡∏¥‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï (ctype)
                {"Content-Type": ctype}
            ],
            ExpiresIn=300, # URL ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ 5 ‡∏ô‡∏≤‡∏ó‡∏µ
        )

        logger.info(f"‚úÖ Presigned URL generated successfully for {key}")
        return _resp(200, {"key": key, "upload": presigned})

    except Exception as e:
        logger.exception("‚ùå Internal error while generating presign")
        return _resp(500, {"error": "internal_error", "detail": str(e)})